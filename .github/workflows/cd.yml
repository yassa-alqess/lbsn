name: cd-workflow

on:
  workflow_run:
    workflows: ['ci-workflow']
    types: [completed]
    branches:
      - main
      - development
  workflow_dispatch:

jobs:
  setup: #The workflow must contain at least one job with no dependencies.
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: echo "Setting up deployment..."

  ssh:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up sshpass
        run: sudo apt-get install -y sshpass

      - name: Test SSH Connection
        env:
          SSH_PASS: ${{ secrets.SSH_PASS }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST echo "SSH connection successful"

  deploy:
    runs-on: ubuntu-latest
    needs: ssh
    if: ${{ github.job.status == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Server
        env:
          SSH_PASS: ${{ secrets.SSH_PASS }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
            # Navigate to the directory where the compose file is located
            cd /app
            
            # Pull the latest Docker images
            docker-compose -f compose.yml pull
            
            # Stop and remove the existing containers
            docker-compose -f compose.yml down || true
            
            # Start the containers with the new image
            docker-compose -f compose.yml up -d --build
          EOF
